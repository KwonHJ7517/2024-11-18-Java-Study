/*
 *   1. 클래스 구조
 *      클래스는 객체를 생성하기 위한 설계
 *            --- 속성 / 동작
 *                (변수) (메소드)
 *      class ClassName
 *      {
 *         --------------------
 *         변수
 *         = 멤버변수 (인스턴스): 객체 생성시마다 메모리에 따로 저장
 *         = 정적변수 (static): 메모리 공간 1개 생성
 *                           => 모든 객체를 공유해서 사용
 *         형식)
 *             멤버변수
 *             [접근지정어] 데이터형 변수명;
 *             --------- 데이터 보호 (정보은닉) => private
 *             정적변수
 *             [접근지정어] static 데이터형 변수명;
 *         --------------------
 *         생성자 : 멤버변수 설정 => 초기화
 *               ------- 기본값 설정 (int=0,long=0L,double=0.0,String=null,boolean=false)
 *               초기화
 *               1) 명시적 초기값: 임의로 성정
 *                  --------- class 영역은 선언만 하는 영역
 *               2) 구현후에 초기화: 파일읽기 / 데이터베이스
 *                  연산자 / 제어문 ... 구현=> 클래스 영역에서 설정이 불가능
 *                  = 생성자: 인스턴스 변수 / static 변수 설정 가능
 *                  = 인스턴스 블록: 인스턴스 변수 / static 변수 설정 가능
 *                  = static 블록: static 변수 설정 가능
 *          생성자 특징
 *            = 클래스명과 동일
 *            = 오버로딩이 가능
 *              -----
 *                => 메소드명이 동일
 *                => 리턴형은 관계없다
 *                => 매개변수가 다르다(데이터형,갯수)
 *                => 접근지정어도 관련없다
 *             = 리턴형이 없다 (void => 리턴형이다)
 *             class A
 *             
 *         --------------------
 *         메소드: 동작 , 행위 => 기능처리
 *               => 데이터 결과값 전송
 *               => 다른 클래스와 연결
 *         형식)
 *             [접근지정어] 리턴형 메소드명(매개변수...) => 선언부
 *                      -----
 *             -------- public
 *             {
 *                 => 구현부
 *                 return 값
 *                        
 *                 *** void 일때는 return 생략 가능
 *                    => 컴파일러에 의해 자동 추가
 *                    => return 은 메소드 종료
 *             }
 *             
 *         --------------------
 *      }
 *   2. 멤버변수
 *   3. 생성자
 *   4. 메소드
 *   5. 접근지정어
 *      클래스,메소드,멤버변수만 사용이 가능 / 지역변수에서는 사용 불가
 *                                  ------ final
 *      private : 자신의 클래스에서만 사용 가능
 *                데이터 은닉화 => 모든 멤버변수는 private
 *      public : 모든 클래스에서 사용 가능
 *               클래스 , 메소드 , 생성자
 *               
 *      protected : 같은 패키지안에서만 사용 가능
 *                  다른 패키지 => 상속받은 클래스
 *                  => 사용빈도가 거의 없다
 *      default : 같은 패키지에서만 사용 가능
 *                윈도우=> 버튼 , 편집
 *   ===> 객체지향의 3대 특성
 *        1) 캡슐화 : 개인정보 보호
 *           => 변수 : private
 *           => 변수의 기능을 추가 => getter/setter
 *        2) 상속 / 포함 : 재사용 기법 / 중복코드를 제거
 *        (상속의 단점: 1. 소스를 볼 수 없다 => 가독성이 떨어짐 / 2. 속도가 느려진다 / 3. 변경이 어렵다 => 다른 클래스에 영향이 있다)
 *        3) 기능 변경 / 기능 추가
 *           오버라이딩   오버로딩 ==> 다형성
 *   6. 캡슐화 : 데이터 보호 => 데이터를 감춘다 => private
 *             => 필요시에 사용 => 메소드를 이용해서 사용
 *             => 저장 : setter , 읽기 : getter
 *   7. 패키지 : 폴더개념 => 관련된 클래스를 모아서 검색이 쉽게함
 *             다른 패키지에서 사용하려면 => import
 *                                   ------
 *                                   1. 라이브러리
 *                                   2. 사용자 정의
 *                                   3. 같은 패키지에서는 import를 사용하지 않는다
 *                     => 패키지명에 키워는 사용 불가
 *                     => 소문자로 사용 (대문자x)
 *                     => 공백이 있으면 안된다
 *                     => 특수문자 사용 불가능
 *                     => 클래스 분리
 *                     => 네트워크
 *                        client / server / commons
 *                        웹
 *                        admin / user
 *   8. static 을 사용시에 주의점
 *      static 메소드 내
 *      --------------
 *      static 변수 사용 가능
 *      static 메소드 호출 가능
 *      this,this() 사용 불가능
 *      ----------- 인스턴스 메소드에서 사용 가능
 *      this : 자신의 객체주소를 가지고 있다
 *             => 사용되는 범위 (인스턴스 변수 / 지역변수 구분시)
 *   -------------------
 *   6장: 상속 / 포함 / 클래스 종류 (7장 추상클래스 / 인터페이스)
 *    | 오버라이딩
 *   8장: 예외처리
 *   ------------------------ 자바 문법
 *   9장: java.lang / java.util (*** Collection)
 *   10장: ** java.io / 
 */
public class 객체지향_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
