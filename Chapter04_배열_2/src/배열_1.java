/*
 *   데이터 저장 ==> 데이터 가공 ==> 결과값 출력 
 *   --------     -------     | 브라우저
 *                연산자/제어문   | 핸드폰
 *   변수 => 묶어서 한개 이름으로 제어 | 윈도우
 *   -------------------------------------
 *   관련된 데이터를 묶어서 사용 : 배열 / 클래스
 *   관련된 명령문을 묶어서 사용 : 메소드
 *   --------------------------------- 자바의 기본 형식
 *   => 객체 지향 프로그램
 *   배열 : 관련된 데이터를 여러개 모아서 한개의 이름으로 관리
 *   ----
 *     1) 장점 => 여러개 변수를 한번에 처리
 *              ------------------
 *               연속적인 메모리 구조 => 메모리 크기가 동일
 *               => 같은 데이터형만 모아서 관리
 *     2) 단점 => 가변형 (컬렉션)
 *        => 한번 선언하면 추가/삭제가 어렵다
 *                     -------> 새롭게 큰 배열을 생성
 *                     -------> 작은 배열을 생성
 *     => 같은 종류의 변수가 3개 이상이면 => 배열
 *     
 *  1. 배열 생성
 *     데이터형[] 배열명;  ==> 권장 사항
 *     데이터형 배열명[];
 *  2. 배열의 초기화 => 값을 지정 (변수 => 초기화)
 *     => 지역변수 (메소드안에 선언하는 변수)
 *               ====> main
 *     => 클래스 : 멤버변수(자동 초기화)
 *     1) 선언과 동시에 초기화
 *        => 초기값을 지정(명시적 초기화) => String
 *           int[] arr={1,2,3,4,5}; => 데이터 검색 => 데이터 고정
 *        => 기본데이터로 초기화 => 기본 데이터값 설정
 *           int[] arr=new int[5]
 *                            --- 저장 갯수
 *           => 정수 5개를 모아서 관리
 *              ------ 0으로 초기화 된다
 *           => new를 이용하면 => 새로운 메모리를 만들어라
 *              -----------
 *              정수
 *                byte = 0
 *                int = 0
 *                long = 0L
 *              실수
 *                float = 0.0f
 *                double = 0.0
 *              논리
 *                boolean => false
 *              문자
 *                char = '\u00000' = ''
 *              문자열
 *                String = null : 저장된 주소가 없는 상태
 *                ------ 모든 클래스는 디폴트값이 nu11
 *          *** 배열
 *          int[] 배열명
 *          double[] 배열명
 *          String[] 배열명
 *          char[] 배열명
 *          boolean[] 배열명
 *          => 선언시에 저장 갯수 확인
 *          int[] arr={1,2,3,4,5} => 5개 저장
 *          int[] arr=new int[5]
 *                           --- 갯수 고정
 *                           --- 저장된 값은 변경이 가능
 *                           --- 메모리 크기를 변경할 수 없다
 *                               -------- arraycopy
 *                               -------- 새로운 배열
 *                           --- 얕은 복사 / 깊은 복사
 *                               ------   -------
 *                               같은 주소 이용  새로운 배열 생성
 *                                             | clone()
 *     2) 선언후에 초기화
 *        int[] arr;
 *        => arr=new int[]{1,2,3,4,5};
 *        
 *     3) 출력 (데이터 읽기)
 *     	  int[] arr={1,2,3,4,5}
 *        = 일반 for문 이용 => 인덱스 이용
 *          for(int i=0;i<arr.length;i++)
 *          {
 *          	System.out.println(arr[i])
 *          }
 *        = ***향상된 for문 이용 : 실제 배열에 저장된 데이터 읽기
 *          브라우저에 출력시에 사용되는 for
 *          => 변경이 불가능 => 출력
 *          for(int i:arr)
 *          {
 *          	System.out.println(i)
 *          }
 *        = 라이브러리 이용
 *        	System.out.println(Arrays.toString(배열명))
 *     4) 메모리에 저장되는 과정 (메모리 주소를 참조해서 데이터 관리 => 참조변수)
 *        int[] arr=new int[5]
 *        Stack(데이터가 있는 메모리주소)     Heap(실제 데이터가 저장된 메모리)
 *            
 *            --- arr ---
 *               null => 주소가 배정이 안됨
 *            -----------
 *                                        ------------------
 *                                         0 | 0 | 0 | 0 | 0 
 *                                        ------------------
 */
import java.util.Arrays;
/*
 *  86page => 배열 생성 / 초기화
 *  87page => 배열 선언
 *  88page => 선언과 동시에 초기화 => new
 *  89page => 메모리에 저장
 *  92page => 향상된 for 문
 *  95page => 데이터형의 변환
 *   long[] arr={1,2,3,4,5}
 *               --------- long으로 변경
 *   
 */
public class 배열_1 {
	// 멤버변수 => 다른 클래스에서도 사용이 가능 => heap
	// 프로그램 종료시까지 사용이 가능
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 지역변수 => main 에서만 사용이 가능 = stack
		// main 이 종료되면 자동으로 사라진다

int[] arr=new int[10];
		for(int i=0;i<arr.length;i++)
		{
			arr[i]=(int)(Math.random()*100)+1;
		}
		System.out.println(Arrays.toString(arr));
	}

}
